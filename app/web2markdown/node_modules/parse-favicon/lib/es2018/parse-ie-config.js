"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseIEConfig = void 0;
const query_1 = require("@blackglory/query");
const extra_promise_1 = require("extra-promise");
const iterable_operator_1 = require("iterable-operator/lib/es2015/style/chaining/iterable-operator");
const parse_html_1 = require("./utils/parse-html");
const parse_xml_1 = require("./utils/parse-xml");
const is_url_1 = require("./utils/is-url");
const combine_relative_urls_1 = require("./utils/combine-relative-urls");
const elements_to_attributes_1 = require("./utils/elements-to-attributes");
const immer_1 = require("./utils/immer");
async function parseIEConfig(html, textFetcher) {
    const document = parse_html_1.parseHTML(html);
    const configUrls = getConfigUrls(document);
    const icons = await extra_promise_1.map(configUrls, getIconsFromUrl);
    return icons.flat();
    async function getIconsFromUrl(url) {
        const text = await fetch(url);
        if (text) {
            return getIEConfigIcons(text, url);
        }
        else {
            return [];
        }
        async function fetch(url) {
            try {
                return await textFetcher(url);
            }
            catch (_a) {
                return null;
            }
        }
    }
}
exports.parseIEConfig = parseIEConfig;
function getConfigUrls(document) {
    const nodes = query_1.query.call(document, query_1.css `meta[name="msapplication-config"]`);
    return new iterable_operator_1.IterableOperator(nodes)
        .map(x => x.getAttribute('content'))
        .filter(is_url_1.isUrl)
        .toArray();
}
function getIEConfigIcons(xml, configUrl) {
    const document = parse_xml_1.parseXML(xml);
    return [
        ...getIcons(document, '/browserconfig/msapplication/tile/square70x70logo', { width: 70, height: 70 }),
        ...getIcons(document, '/browserconfig/msapplication/tile/square150x150logo', { width: 150, height: 150 }),
        ...getIcons(document, '/browserconfig/msapplication/tile/wide310x150logo', { width: 310, height: 150 }),
        ...getIcons(document, '/browserconfig/msapplication/tile/square310x310logo', { width: 310, height: 310 })
    ].map(combineIconUrlWithConfigUrl);
    function combineIconUrlWithConfigUrl(icon) {
        return immer_1.produce(icon, icon => {
            icon.url = combine_relative_urls_1.combineRelativeUrls(configUrl, icon.url);
        });
    }
}
function getIcons(document, selector, size) {
    const elements = query_1.query.call(document, query_1.xpath `${selector}`);
    return new iterable_operator_1.IterableOperator(elements)
        .transform(elements_to_attributes_1.elementsToAttributes('src'))
        .map(url => createIcon(url, size))
        .toArray();
    function createIcon(url, size) {
        return {
            reference: 'msapplication-config',
            url,
            type: null,
            size
        };
    }
}
//# sourceMappingURL=parse-ie-config.js.map