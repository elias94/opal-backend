"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseImage = exports.UnknownImageFormatError = void 0;
const parse_file_type_from_buffer_1 = require("./utils/parse-file-type-from-buffer");
const image_size_1 = __importDefault(require("image-size"));
const is_svg_1 = __importDefault(require("is-svg"));
const iterable_operator_1 = require("iterable-operator/lib/es2015/style/chaining/iterable-operator");
const errors_1 = require("@blackglory/errors");
class UnknownImageFormatError extends errors_1.CustomError {
}
exports.UnknownImageFormatError = UnknownImageFormatError;
function parseImage(buffer) {
    return __awaiter(this, void 0, void 0, function* () {
        const type = yield parse_file_type_from_buffer_1.parseFileTypeFromBuffer(buffer);
        if (type) {
            if (isImage(type.mime)) {
                return {
                    type: type.mime,
                    size: getSize(buffer)
                };
            }
            if (isXML(type.mime) && is_svg_1.default(buffer))
                return parseAsSvg(buffer);
        }
        else {
            if (is_svg_1.default(buffer))
                return parseAsSvg(buffer);
        }
        throw new UnknownImageFormatError();
    });
}
exports.parseImage = parseImage;
function parseAsSvg(buffer) {
    return {
        type: 'image/svg+xml',
        size: getSize(buffer)
    };
}
function getSize(buffer) {
    const result = image_size_1.default(buffer);
    if (result.images) {
        return new iterable_operator_1.IterableOperator(result.images)
            .map(x => createSize(x.width, x.height))
            .uniqBy(sizeToString)
            .toArray();
    }
    else {
        return createSize(result.width, result.height);
    }
    function createSize(width, height) {
        return { width, height };
    }
    function sizeToString(size) {
        return `${size.width}x${size.height}`;
    }
}
function isXML(mime) {
    return mime === 'application/xml'
        || mime === 'text/xml';
}
function isImage(mime) {
    return mime.startsWith('image');
}
//# sourceMappingURL=parse-image.js.map