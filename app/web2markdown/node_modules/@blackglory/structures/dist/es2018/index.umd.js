(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Structures = {}));
}(this, (function (exports) { 'use strict';

    function convertConsToArray([value, next]) {
        if (next === null)
            return [value];
        return [value, ...convertConsToArray(next)];
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    var _map$1;
    class Emitter {
        constructor() {
            _map$1.set(this, new Map());
        }
        on(event, handler) {
            if (!__classPrivateFieldGet(this, _map$1).has(event))
                __classPrivateFieldGet(this, _map$1).set(event, new Set());
            const set = __classPrivateFieldGet(this, _map$1).get(event);
            set.add(handler);
        }
        off(event, handler) {
            if (__classPrivateFieldGet(this, _map$1).has(event)) {
                const set = __classPrivateFieldGet(this, _map$1).get(event);
                set.delete(handler);
                if (set.size === 0)
                    __classPrivateFieldGet(this, _map$1).delete(event);
            }
        }
        emit(event, value) {
            if (__classPrivateFieldGet(this, _map$1).has(event)) {
                const set = __classPrivateFieldGet(this, _map$1).get(event);
                set.forEach(cb => cb(value));
            }
        }
    }
    _map$1 = new WeakMap();

    var _map;
    class HashSet {
        constructor(hash) {
            this.hash = hash;
            _map.set(this, new Map());
        }
        add(value) {
            __classPrivateFieldGet(this, _map).set(this.hash(value), value);
            return this;
        }
        delete(value) {
            return __classPrivateFieldGet(this, _map).delete(this.hash(value));
        }
        has(value) {
            return __classPrivateFieldGet(this, _map).has(this.hash(value));
        }
        clear() {
            __classPrivateFieldGet(this, _map).clear();
        }
        values() {
            return __classPrivateFieldGet(this, _map).values();
        }
        get size() {
            return __classPrivateFieldGet(this, _map).size;
        }
        get [(_map = new WeakMap(), Symbol.toStringTag)]() {
            return this.constructor.name;
        }
        [Symbol.iterator]() {
            return __classPrivateFieldGet(this, _map).values();
        }
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    var customError = createCommonjsModule(function (module, exports) {
    exports.CustomError = void 0;
    class CustomError extends Error {
        get name() {
            return this.constructor.name;
        }
    }
    exports.CustomError = CustomError;

    });

    var expectedError = createCommonjsModule(function (module, exports) {
    exports.ExpectedError = void 0;

    class ExpectedError extends customError.CustomError {
    }
    exports.ExpectedError = ExpectedError;

    });

    var assertionError = createCommonjsModule(function (module, exports) {
    exports.AssertionError = void 0;

    class AssertionError extends customError.CustomError {
    }
    exports.AssertionError = AssertionError;

    });

    var normalize_1 = createCommonjsModule(function (module, exports) {
    exports.normalize = void 0;
    function normalize(err) {
        var _a;
        return {
            name: err.name,
            message: err.message,
            stack: (_a = err.stack) !== null && _a !== void 0 ? _a : null
        };
    }
    exports.normalize = normalize;

    });

    var refute_1 = createCommonjsModule(function (module, exports) {
    exports.refute = void 0;

    function refute(condition, message) {
        if (condition)
            throw new expectedError.ExpectedError(message);
    }
    exports.refute = refute;

    });

    var assert_1 = createCommonjsModule(function (module, exports) {
    exports.assert = void 0;

    function assert(condition, message) {
        if (!condition)
            throw new assertionError.AssertionError(message);
    }
    exports.assert = assert;

    });

    var es2018 = createCommonjsModule(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };__exportStar(customError, exports);
    __exportStar(expectedError, exports);
    __exportStar(assertionError, exports);
    __exportStar(normalize_1, exports);
    __exportStar(refute_1, exports);
    __exportStar(assert_1, exports);

    });

    var _items;
    class Queue {
        constructor() {
            _items.set(this, []);
        }
        empty() {
            __classPrivateFieldGet(this, _items).length = 0;
        }
        enqueue(...items) {
            __classPrivateFieldGet(this, _items).push(...items);
        }
        /**
         * @throws {EmptyQueueError}
         */
        dequeue() {
            if (this.size === 0)
                throw new EmptyQueueError();
            return __classPrivateFieldGet(this, _items).shift();
        }
        get size() {
            return __classPrivateFieldGet(this, _items).length;
        }
    }
    _items = new WeakMap();
    class EmptyQueueError extends es2018.CustomError {
        constructor() {
            super('Queue is empty.');
        }
    }

    exports.Emitter = Emitter;
    exports.EmptyQueueError = EmptyQueueError;
    exports.HashSet = HashSet;
    exports.Queue = Queue;
    exports.convertConsToArray = convertConsToArray;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.umd.js.map
