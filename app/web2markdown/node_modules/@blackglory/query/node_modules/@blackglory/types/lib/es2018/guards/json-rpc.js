"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isntJsonRpcError = exports.isJsonRpcError = exports.isntJsonRpcSuccess = exports.isJsonRpcSuccess = exports.isntJsonRpcRequest = exports.isJsonRpcRequest = exports.isntJsonRpcNotification = exports.isJsonRpcNotification = void 0;
const ajv_1 = require("ajv");
const JsonRpcIdSchema = {
    oneOf: [
        { type: 'string' },
        { type: 'number' }
    ]
};
const JsonRpcParamsSchema = {
    oneOf: [
        { type: 'array' },
        { type: 'object' }
    ]
};
const JsonRpcNotificationSchema = {
    type: 'object',
    properties: {
        jsonrpc: { type: 'string' },
        method: { type: 'string' },
        params: JsonRpcParamsSchema,
        id: false
    },
    required: ['jsonrpc', 'method']
};
const JsonRpcRequestSchema = {
    type: 'object',
    properties: {
        jsonrpc: { type: 'string' },
        id: JsonRpcIdSchema,
        method: { type: 'string' },
        params: JsonRpcParamsSchema
    },
    required: ['jsonrpc', 'id', 'method']
};
const JsonRpcSuccessSchema = {
    type: 'object',
    properties: {
        jsonrpc: { type: 'string' },
        id: JsonRpcIdSchema,
        result: {}
    },
    required: ['jsonrpc', 'id', 'result']
};
const JsonRpcErrorObjectSchema = {
    type: 'object',
    properties: {
        code: { type: 'number' },
        message: { type: 'string' },
        data: {}
    },
    required: ['code', 'message']
};
const JsonRpcErrorSchema = {
    type: 'object',
    properties: {
        jsonrpc: { type: 'string' },
        id: JsonRpcIdSchema,
        error: JsonRpcErrorObjectSchema
    },
    required: ['jsonrpc', 'id', 'error']
};
let ajv;
function isJsonRpcNotification(val) {
    if (!ajv)
        ajv = new ajv_1.default();
    return ajv.validate(JsonRpcNotificationSchema, val);
}
exports.isJsonRpcNotification = isJsonRpcNotification;
function isntJsonRpcNotification(val) {
    return !isJsonRpcNotification(val);
}
exports.isntJsonRpcNotification = isntJsonRpcNotification;
function isJsonRpcRequest(val) {
    if (!ajv)
        ajv = new ajv_1.default();
    return ajv.validate(JsonRpcRequestSchema, val);
}
exports.isJsonRpcRequest = isJsonRpcRequest;
function isntJsonRpcRequest(val) {
    return !isJsonRpcRequest(val);
}
exports.isntJsonRpcRequest = isntJsonRpcRequest;
function isJsonRpcSuccess(val) {
    if (!ajv)
        ajv = new ajv_1.default();
    return ajv.validate(JsonRpcSuccessSchema, val);
}
exports.isJsonRpcSuccess = isJsonRpcSuccess;
function isntJsonRpcSuccess(val) {
    return !isJsonRpcSuccess(val);
}
exports.isntJsonRpcSuccess = isntJsonRpcSuccess;
function isJsonRpcError(val) {
    if (!ajv)
        ajv = new ajv_1.default();
    return ajv.validate(JsonRpcErrorSchema, val);
}
exports.isJsonRpcError = isJsonRpcError;
function isntJsonRpcError(val) {
    return !isJsonRpcError(val);
}
exports.isntJsonRpcError = isntJsonRpcError;
//# sourceMappingURL=json-rpc.js.map