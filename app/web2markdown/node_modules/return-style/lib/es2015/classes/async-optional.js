"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _promise;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncOptional = exports.Nil = void 0;
const optional_1 = require("./optional");
exports.Nil = Symbol();
class AsyncOptional {
    constructor(promise) {
        _promise.set(this, void 0);
        __classPrivateFieldSet(this, _promise, Promise.resolve(promise));
    }
    static Some(value) {
        return AsyncSome.of(value);
    }
    static None() {
        return AsyncNone.of();
    }
    get then() {
        const promise = __classPrivateFieldGet(this, _promise).then(x => x === exports.Nil
            ? optional_1.Optional.None()
            : optional_1.Optional.Some(x));
        return promise.then.bind(promise);
    }
    onSome(callback) {
        ;
        (() => __awaiter(this, void 0, void 0, function* () {
            const result = yield __classPrivateFieldGet(this, _promise);
            if (result !== exports.Nil)
                callback(result);
        }))();
        return new AsyncOptional(__classPrivateFieldGet(this, _promise));
    }
    onNone(callback) {
        ;
        (() => __awaiter(this, void 0, void 0, function* () {
            const result = yield __classPrivateFieldGet(this, _promise);
            if (result === exports.Nil)
                callback();
        }))();
        return new AsyncOptional(__classPrivateFieldGet(this, _promise));
    }
    isSome() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield __classPrivateFieldGet(this, _promise);
            return result !== exports.Nil;
        });
    }
    isNone() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield __classPrivateFieldGet(this, _promise);
            return result === exports.Nil;
        });
    }
    orElse(defaultValue) {
        return new AsyncOptional((() => __awaiter(this, void 0, void 0, function* () {
            const result = yield __classPrivateFieldGet(this, _promise);
            if (result === exports.Nil)
                return defaultValue;
            return result;
        }))());
    }
    map(mapper) {
        return new AsyncOptional((() => __awaiter(this, void 0, void 0, function* () {
            const result = yield __classPrivateFieldGet(this, _promise);
            if (result === exports.Nil)
                return exports.Nil;
            return mapper(result);
        }))());
    }
    filter(predicate) {
        return new AsyncOptional((() => __awaiter(this, void 0, void 0, function* () {
            const result = yield __classPrivateFieldGet(this, _promise);
            if (result === exports.Nil)
                return exports.Nil;
            if (predicate(result))
                return result;
            return exports.Nil;
        }))());
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield __classPrivateFieldGet(this, _promise);
            if (result === exports.Nil)
                throw new Error('Cannot get value from None');
            return result;
        });
    }
}
exports.AsyncOptional = AsyncOptional;
_promise = new WeakMap();
class AsyncNone extends AsyncOptional {
    static of() {
        return new AsyncNone();
    }
    constructor() {
        super(Promise.resolve(exports.Nil));
    }
}
class AsyncSome extends AsyncOptional {
    static of(value) {
        return new AsyncSome(value);
    }
    constructor(value) {
        super(Promise.resolve(value));
    }
}
//# sourceMappingURL=async-optional.js.map