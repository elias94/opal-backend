"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _value, _value_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Result = void 0;
class Result {
    static Ok(value) {
        return Ok.of(value);
    }
    static Err(error) {
        return Err.of(error);
    }
}
exports.Result = Result;
class Ok extends Result {
    constructor(value) {
        super();
        _value.set(this, void 0);
        __classPrivateFieldSet(this, _value, value);
    }
    static of(value) {
        return new Ok(value);
    }
    isOk() {
        return true;
    }
    isErr() {
        return false;
    }
    onOk(callback) {
        callback(__classPrivateFieldGet(this, _value));
        return Ok.of(__classPrivateFieldGet(this, _value));
    }
    onErr() {
        return Ok.of(__classPrivateFieldGet(this, _value));
    }
    orElse() {
        return Ok.of(__classPrivateFieldGet(this, _value));
    }
    map(fn) {
        return Ok.of(fn(__classPrivateFieldGet(this, _value)));
    }
    get() {
        return __classPrivateFieldGet(this, _value);
    }
}
_value = new WeakMap();
class Err extends Result {
    constructor(err) {
        super();
        _value_1.set(this, void 0);
        __classPrivateFieldSet(this, _value_1, err);
    }
    static of(error) {
        return new Err(error);
    }
    isOk() {
        return false;
    }
    isErr() {
        return true;
    }
    onOk() {
        return Err.of(__classPrivateFieldGet(this, _value_1));
    }
    onErr(callback) {
        callback(__classPrivateFieldGet(this, _value_1));
        return Err.of(__classPrivateFieldGet(this, _value_1));
    }
    orElse(defaultValue) {
        return Ok.of(defaultValue);
    }
    map() {
        return Err.of(__classPrivateFieldGet(this, _value_1));
    }
    get() {
        throw __classPrivateFieldGet(this, _value_1);
    }
}
_value_1 = new WeakMap();
//# sourceMappingURL=result.js.map