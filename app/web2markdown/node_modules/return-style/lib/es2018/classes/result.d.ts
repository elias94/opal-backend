export interface IResult<T, X> {
    isOk(): boolean;
    isErr(): boolean;
    onOk(callback: (val: T) => void): IResult<T, X>;
    onErr(callback: (err: X) => void): IResult<T, X>;
    orElse<U>(defaultValue: U): IResult<T, never> | IResult<U, never>;
    map<U>(mapper: (val: T) => U): IResult<U, X>;
    get(): T;
}
export declare abstract class Result {
    static Ok<T>(value: T): IResult<T, never>;
    static Err<T>(error: T): IResult<never, T>;
}
