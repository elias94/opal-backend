"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _value;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Optional = void 0;
class Optional {
    static Some(value) {
        return Some.of(value);
    }
    static None() {
        return None.of();
    }
}
exports.Optional = Optional;
class Some extends Optional {
    constructor(value) {
        super();
        _value.set(this, void 0);
        __classPrivateFieldSet(this, _value, value);
    }
    static of(value) {
        return new Some(value);
    }
    isSome() {
        return true;
    }
    isNone() {
        return false;
    }
    onSome(callback) {
        callback(__classPrivateFieldGet(this, _value));
        return Some.of(__classPrivateFieldGet(this, _value));
    }
    onNone() {
        return Some.of(__classPrivateFieldGet(this, _value));
    }
    orElse() {
        return Some.of(__classPrivateFieldGet(this, _value));
    }
    map(mapper) {
        return Some.of(mapper(__classPrivateFieldGet(this, _value)));
    }
    filter(predicate) {
        if (predicate(__classPrivateFieldGet(this, _value))) {
            return Some.of(__classPrivateFieldGet(this, _value));
        }
        else {
            return None.of();
        }
    }
    get() {
        return __classPrivateFieldGet(this, _value);
    }
}
_value = new WeakMap();
class None extends Optional {
    static of() {
        return new None();
    }
    constructor() {
        super();
    }
    isSome() {
        return false;
    }
    isNone() {
        return true;
    }
    onSome() {
        return None.of();
    }
    onNone(callback) {
        callback();
        return None.of();
    }
    orElse(defaultValue) {
        return Some.of(defaultValue);
    }
    map() {
        return None.of();
    }
    filter() {
        return None.of();
    }
    get() {
        throw new Error('Cannot get value from None');
    }
}
//# sourceMappingURL=optional.js.map