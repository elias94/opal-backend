export interface IOptional<T> {
    isSome(): boolean;
    isNone(): boolean;
    onSome(callback: (val: T) => void): IOptional<T>;
    onNone(callback: () => void): IOptional<T>;
    orElse<U>(defaultValue: U): IOptional<T | U>;
    map<U>(mapper: (val: T) => U): IOptional<U>;
    filter<U extends T = T>(predicate: (val: T) => boolean): IOptional<U>;
    get(): T;
}
export declare abstract class Optional {
    static Some<T>(value: T): IOptional<T>;
    static None(): IOptional<never>;
}
