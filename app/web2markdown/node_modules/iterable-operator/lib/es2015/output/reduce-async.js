"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reduceAsync = exports.RuntimeError = void 0;
const types_1 = require("@blackglory/types");
const error_1 = require("../error");
Object.defineProperty(exports, "RuntimeError", { enumerable: true, get: function () { return error_1.RuntimeError; } });
function reduceAsync(iterable, fn, initialValue) {
    if (types_1.isUndefined(initialValue)) {
        return reduceAsyncWithoutInitialValue(iterable, fn);
    }
    else {
        return reduceAsyncWithInitialValue(iterable, fn, initialValue);
    }
}
exports.reduceAsync = reduceAsync;
function reduceAsyncWithInitialValue(iterable, fn, initialValue) {
    if (types_1.isAsyncIterable(iterable)) {
        return reduceAsyncIterable(iterable);
    }
    else {
        return reduceIterable(iterable);
    }
    function reduceIterable(iterable) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = initialValue, index = 0;
            for (const currentValue of iterable) {
                result = yield fn(result, currentValue, index++);
            }
            return result;
        });
    }
    function reduceAsyncIterable(iterable) {
        var iterable_1, iterable_1_1;
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            let result = initialValue, index = 0;
            try {
                for (iterable_1 = __asyncValues(iterable); iterable_1_1 = yield iterable_1.next(), !iterable_1_1.done;) {
                    const currentValue = iterable_1_1.value;
                    result = yield fn(result, currentValue, index++);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) yield _a.call(iterable_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return result;
        });
    }
}
function reduceAsyncWithoutInitialValue(iterable, fn) {
    if (types_1.isAsyncIterable(iterable)) {
        return reduceAsyncIterable(iterable);
    }
    else {
        return reduceIterable(iterable);
    }
    function reduceAsyncIterable(iterable) {
        return __awaiter(this, void 0, void 0, function* () {
            const [initialValue, iterator] = yield readFirst(iterable);
            let result = initialValue, index = 1;
            while (true) {
                const current = yield iterator.next();
                if (current.done)
                    break;
                const currentValue = current.value;
                result = yield fn(result, currentValue, index++);
            }
            return result;
            function readFirst(iterable) {
                return __awaiter(this, void 0, void 0, function* () {
                    const [[result], iterator] = yield read(iterable, 1);
                    return [result, iterator];
                });
            }
            function read(iterable, count) {
                return __awaiter(this, void 0, void 0, function* () {
                    const iterator = iterable[Symbol.asyncIterator]();
                    const result = [];
                    while (count > 0) {
                        const current = yield iterator.next();
                        if (current.done)
                            throw new error_1.RuntimeError('Reduce of empty iterable with no initial value');
                        result.push(current.value);
                        count--;
                    }
                    return [result, iterator];
                });
            }
        });
    }
    function reduceIterable(iterable) {
        return __awaiter(this, void 0, void 0, function* () {
            const [initialValue, iterator] = readFirst(iterable);
            let result = initialValue, index = 1;
            while (true) {
                const current = iterator.next();
                if (current.done)
                    break;
                const currentValue = current.value;
                result = yield fn(result, currentValue, index++);
            }
            return result;
            function readFirst(iterable) {
                const [[result], iterator] = read(iterable, 1);
                return [result, iterator];
            }
            function read(iterable, count) {
                const iterator = iterable[Symbol.iterator]();
                const result = [];
                while (count > 0) {
                    const current = iterator.next();
                    if (current.done)
                        throw new error_1.RuntimeError('Reduce of empty iterable with no initial value');
                    result.push(current.value);
                    count--;
                }
                return [result, iterator];
            }
        });
    }
}
//# sourceMappingURL=reduce-async.js.map