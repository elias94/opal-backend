"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IterableOperator = exports.RuntimeError = exports.InvalidArgumentError = void 0;
const mixin_1 = require("./mixin");
const iterable_operator_base_1 = require("./iterable-operator-base");
const chunk_by_1 = require("./middleware/chunk-by");
const chunk_1 = require("./middleware/chunk");
const concat_1 = require("./middleware/concat");
const drop_right_1 = require("./middleware/drop-right");
const drop_until_1 = require("./middleware/drop-until");
const drop_1 = require("./middleware/drop");
const filter_1 = require("./middleware/filter");
const flatten_by_1 = require("./middleware/flatten-by");
const flatten_deep_1 = require("./middleware/flatten-deep");
const flatten_1 = require("./middleware/flatten");
const map_1 = require("./middleware/map");
const repeat_1 = require("./middleware/repeat");
const slice_1 = require("./middleware/slice");
const split_by_1 = require("./middleware/split-by");
const split_1 = require("./middleware/split");
const take_right_1 = require("./middleware/take-right");
const take_until_1 = require("./middleware/take-until");
const take_1 = require("./middleware/take");
const tap_1 = require("./middleware/tap");
const to_async_iterable_1 = require("./middleware/to-async-iterable");
const transform_async_1 = require("./middleware/transform-async");
const transform_1 = require("./middleware/transform");
const uniq_by_1 = require("./middleware/uniq-by");
const uniq_1 = require("./middleware/uniq");
const zip_1 = require("./middleware/zip");
const chunk_by_async_1 = require("./middleware/chunk-by-async");
const concat_async_1 = require("./middleware/concat-async");
const drop_until_async_1 = require("./middleware/drop-until-async");
const filter_async_1 = require("./middleware/filter-async");
const flatten_by_async_1 = require("./middleware/flatten-by-async");
const map_async_1 = require("./middleware/map-async");
const split_by_async_1 = require("./middleware/split-by-async");
const take_until_async_1 = require("./middleware/take-until-async");
const tap_async_1 = require("./middleware/tap-async");
const uniq_by_async_1 = require("./middleware/uniq-by-async");
const zip_async_1 = require("./middleware/zip-async");
const consume_1 = require("./output/consume");
const each_1 = require("./output/each");
const every_1 = require("./output/every");
const find_1 = require("./output/find");
const first_1 = require("./output/first");
const includes_1 = require("./output/includes");
const match_1 = require("./output/match");
const reduce_1 = require("./output/reduce");
const some_1 = require("./output/some");
const last_1 = require("./output/last");
const to_array_1 = require("./output/to-array");
const to_set_1 = require("./output/to-set");
const each_async_1 = require("./output/each-async");
const every_async_1 = require("./output/every-async");
const find_async_1 = require("./output/find-async");
const reduce_async_1 = require("./output/reduce-async");
const some_async_1 = require("./output/some-async");
var error_1 = require("../../error");
Object.defineProperty(exports, "InvalidArgumentError", { enumerable: true, get: function () { return error_1.InvalidArgumentError; } });
Object.defineProperty(exports, "RuntimeError", { enumerable: true, get: function () { return error_1.RuntimeError; } });
class IterableOperator extends iterable_operator_base_1.IterableOperatorBase {
}
exports.IterableOperator = IterableOperator;
mixin_1.mixinDecorators(IterableOperator, [
    chunk_1.ChunkOperator,
    chunk_by_1.ChunkByOperator,
    concat_1.ConcatOperator,
    drop_right_1.DropRightOperator,
    drop_until_1.DropUntilOperator,
    drop_1.DropOperator,
    filter_1.FilterOperator,
    flatten_by_1.FlattenByOperator,
    flatten_deep_1.FlattenDeepOperator,
    flatten_1.FlattenOperator,
    map_1.MapOperator,
    repeat_1.RepeatOperator,
    slice_1.SliceOperator,
    split_by_1.SplitByOperator,
    split_1.SplitOperator,
    take_right_1.TakeRightOperator,
    take_until_1.TakeUntilOperator,
    take_1.TakeOperator,
    tap_1.TapOperator,
    transform_1.TransformOperator,
    uniq_by_1.UniqByOperator,
    uniq_1.UniqOperator,
    zip_1.ZipOperator,
    chunk_by_async_1.ChunkByAsyncOperator,
    concat_async_1.ConcatAsyncOperator,
    drop_until_async_1.DropUntilAsyncOperator,
    filter_async_1.FilterAsyncOperator,
    flatten_by_async_1.FlattenByAsync,
    map_async_1.MapAsyncOperator,
    split_by_async_1.SplitByAsyncOperator,
    take_until_async_1.TakeUntilAsyncOperator,
    tap_async_1.TapAsyncOperator,
    to_async_iterable_1.ToAsyncIterableOperator,
    transform_async_1.TransformAsyncOperator,
    uniq_by_async_1.UniqByAsyncOperator,
    zip_async_1.ZipAsyncOperator,
    consume_1.ConsumeOperator,
    each_1.EachOperator,
    every_1.EveryOperator,
    find_1.FindOperator,
    first_1.FirstOperator,
    includes_1.IncludesOperator,
    match_1.MatchOperator,
    reduce_1.ReduceOperator,
    some_1.SomeOperator,
    last_1.LastOperator,
    to_array_1.ToArrayOperator,
    to_set_1.ToSetOperator,
    each_async_1.EachAsyncOperator,
    every_async_1.EveryAsyncOperator,
    find_async_1.FindAsyncOperator,
    reduce_async_1.ReduceAsyncOperator,
    some_async_1.SomeAsyncOperator
]);
//# sourceMappingURL=iterable-operator.js.map