"use strict";
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dropUntilAsync = void 0;
const types_1 = require("@blackglory/types");
function dropUntilAsync(iterable, fn) {
    if (types_1.isAsyncIterable(iterable)) {
        return dropUntilAsyncIterable(iterable);
    }
    else {
        return dropUntilIterable(iterable);
    }
    function dropUntilAsyncIterable(iterable) {
        return __asyncGenerator(this, arguments, function* dropUntilAsyncIterable_1() {
            const iterator = iterable[Symbol.asyncIterator]();
            let index = 0;
            let result;
            while (result = yield __await(iterator.next()), !result.done) {
                if (yield __await(fn(result.value, index++)))
                    break;
            }
            while (!result.done) {
                yield yield __await(result.value);
                result = yield __await(iterator.next());
            }
        });
    }
    function dropUntilIterable(iterable) {
        return __asyncGenerator(this, arguments, function* dropUntilIterable_1() {
            const iterator = iterable[Symbol.iterator]();
            let index = 0;
            let result;
            while (result = iterator.next(), !result.done) {
                if (yield __await(fn(result.value, index++)))
                    break;
            }
            while (!result.done) {
                yield yield __await(result.value);
                result = iterator.next();
            }
        });
    }
}
exports.dropUntilAsync = dropUntilAsync;
//# sourceMappingURL=drop-until-async.js.map