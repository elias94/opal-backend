"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidArgumentError = exports.filter = void 0;
const each_1 = require("./each");
const check_concurrency_1 = require("../shared/check-concurrency");
Object.defineProperty(exports, "InvalidArgumentError", { enumerable: true, get: function () { return check_concurrency_1.InvalidArgumentError; } });
function filter(iterable, fn, concurrency = Infinity) {
    check_concurrency_1.checkConcurrency('concurrency', concurrency);
    return (() => __awaiter(this, void 0, void 0, function* () {
        const results = [];
        yield each_1.each(iterable, (x, i) => __awaiter(this, void 0, void 0, function* () {
            if (yield fn(x, i))
                results[i] = x;
        }), concurrency);
        return Object.values(results);
    }))();
}
exports.filter = filter;
//# sourceMappingURL=filter.js.map