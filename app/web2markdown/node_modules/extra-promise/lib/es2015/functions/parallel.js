"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidArgumentError = exports.parallel = void 0;
const check_concurrency_1 = require("../shared/check-concurrency");
Object.defineProperty(exports, "InvalidArgumentError", { enumerable: true, get: function () { return check_concurrency_1.InvalidArgumentError; } });
const signal_1 = require("../classes/signal");
function parallel(tasks, concurrency = Infinity) {
    check_concurrency_1.checkConcurrency('concurrency', concurrency);
    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
        let total = 0;
        let done = 0;
        let running = 0;
        let isEnd = false;
        const iterator = tasks[Symbol.iterator]();
        let resolved = new signal_1.Signal();
        while (true) {
            const { value: task, done: end } = iterator.next();
            if (end) {
                isEnd = true;
                break;
            }
            else {
                runTask(task);
                total++;
                running++;
                while (running === concurrency) {
                    try {
                        yield resolved;
                    }
                    catch (_a) {
                        return;
                    }
                    finally {
                        resolved = new signal_1.Signal();
                    }
                }
                if (isEnd)
                    return;
            }
        }
        if (total === 0)
            resolve();
        function runTask(task) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    yield task();
                    done++;
                    running--;
                    if (isEnd) {
                        if (total === done)
                            resolve();
                    }
                    else {
                        resolved.emit();
                    }
                }
                catch (e) {
                    isEnd = true;
                    resolved.discard();
                    reject(e);
                }
            });
        }
    }));
}
exports.parallel = parallel;
//# sourceMappingURL=parallel.js.map