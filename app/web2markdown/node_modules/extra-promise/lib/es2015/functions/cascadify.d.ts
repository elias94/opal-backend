import 'reflect-metadata';
declare type Cascadify<T> = {
    [P in keyof T]: T[P] extends (...args: infer U) => PromiseLike<T> ? (...args: U) => Cascadify<T> : T[P] extends (...args: infer U) => PromiseLike<infer W> ? (...args: U) => Promise<W> : T[P] extends (...args: infer U) => infer W ? (...args: U) => Promise<W> : Promise<T[P]>;
};
export declare function cascadify<T extends object>(target: T): Cascadify<T>;
export declare function Cascadable(target: any, key: string): void;
export {};
