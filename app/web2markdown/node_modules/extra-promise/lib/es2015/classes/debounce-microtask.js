"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _registry;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebounceMicrotask = void 0;
class DebounceMicrotask {
    constructor() {
        _registry.set(this, new WeakSet());
    }
    queue(fn) {
        if (__classPrivateFieldGet(this, _registry).has(fn))
            return;
        __classPrivateFieldGet(this, _registry).add(fn);
        queueMicrotask(() => {
            if (__classPrivateFieldGet(this, _registry).has(fn)) {
                try {
                    fn();
                }
                finally {
                    __classPrivateFieldGet(this, _registry).delete(fn);
                }
            }
        });
    }
    cancel(fn) {
        __classPrivateFieldGet(this, _registry).delete(fn);
    }
}
exports.DebounceMicrotask = DebounceMicrotask;
_registry = new WeakMap();
//# sourceMappingURL=debounce-microtask.js.map