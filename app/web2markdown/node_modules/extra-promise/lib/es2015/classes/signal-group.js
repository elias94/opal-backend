"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _group;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignalGroup = void 0;
class SignalGroup {
    constructor() {
        _group.set(this, new Set());
    }
    add(signal) {
        __classPrivateFieldGet(this, _group).add(signal);
    }
    remove(signal) {
        __classPrivateFieldGet(this, _group).delete(signal);
    }
    emitAll() {
        for (const signal of __classPrivateFieldGet(this, _group)) {
            signal.emit();
        }
    }
    discardAll() {
        for (const signal of __classPrivateFieldGet(this, _group)) {
            signal.discard();
        }
    }
}
exports.SignalGroup = SignalGroup;
_group = new WeakMap();
//# sourceMappingURL=signal-group.js.map