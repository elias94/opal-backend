"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _resolve, _reject, _promise;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deferred = void 0;
class Deferred {
    constructor() {
        _resolve.set(this, void 0);
        _reject.set(this, void 0);
        _promise.set(this, void 0);
        __classPrivateFieldSet(this, _promise, new Promise((resolve, reject) => {
            __classPrivateFieldSet(this, _resolve, resolve);
            __classPrivateFieldSet(this, _reject, reject);
        }));
    }
    get then() {
        return __classPrivateFieldGet(this, _promise).then.bind(__classPrivateFieldGet(this, _promise));
    }
    resolve(value) {
        __classPrivateFieldGet(this, _resolve).call(this, value);
    }
    reject(reason) {
        __classPrivateFieldGet(this, _reject).call(this, reason);
    }
}
exports.Deferred = Deferred;
_resolve = new WeakMap(), _reject = new WeakMap(), _promise = new WeakMap();
//# sourceMappingURL=deferred.js.map