export declare class LazyPromise<T> implements PromiseLike<T> {
    #private;
    constructor(executor: (resolve: (value: T) => void, reject: (reason: any) => void) => void);
    get then(): <TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>;
}
