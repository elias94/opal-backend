"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _deferred;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignalDiscarded = exports.Signal = void 0;
const errors_1 = require("@blackglory/errors");
const deferred_1 = require("./deferred");
class Signal {
    constructor() {
        _deferred.set(this, new deferred_1.Deferred());
    }
    get then() {
        return __classPrivateFieldGet(this, _deferred).then.bind(__classPrivateFieldGet(this, _deferred));
    }
    emit() {
        __classPrivateFieldGet(this, _deferred).resolve();
    }
    discard() {
        Promise.resolve(__classPrivateFieldGet(this, _deferred)).catch(() => { });
        __classPrivateFieldGet(this, _deferred).reject(new SignalDiscarded());
    }
}
exports.Signal = Signal;
_deferred = new WeakMap();
class SignalDiscarded extends errors_1.CustomError {
}
exports.SignalDiscarded = SignalDiscarded;
//# sourceMappingURL=signal.js.map