"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _promise, _executor;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LazyPromise = void 0;
class LazyPromise {
    constructor(executor) {
        _promise.set(this, void 0);
        _executor.set(this, void 0);
        __classPrivateFieldSet(this, _executor, executor);
    }
    get then() {
        if (!__classPrivateFieldGet(this, _promise))
            __classPrivateFieldSet(this, _promise, new Promise(__classPrivateFieldGet(this, _executor)));
        return __classPrivateFieldGet(this, _promise).then.bind(__classPrivateFieldGet(this, _promise));
    }
}
exports.LazyPromise = LazyPromise;
_promise = new WeakMap(), _executor = new WeakMap();
//# sourceMappingURL=lazy-promise.js.map