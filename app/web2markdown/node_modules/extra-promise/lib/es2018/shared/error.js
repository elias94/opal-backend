"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelClosedError = exports.InvalidArgumentsLengthError = exports.InvalidArgumentError = void 0;
const errors_1 = require("@blackglory/errors");
class InvalidArgumentError extends errors_1.CustomError {
    constructor(name, expected) {
        if (expected) {
            super(`${name} argument must be ${expected}`);
        }
        else {
            super(`Invalid ${name} value`);
        }
    }
}
exports.InvalidArgumentError = InvalidArgumentError;
class InvalidArgumentsLengthError extends errors_1.CustomError {
    constructor(name, minimum, got) {
        super(`${name} requires at least ${pluralize('argument', minimum)}, but only ${pluralize('was', got)} passed`);
    }
}
exports.InvalidArgumentsLengthError = InvalidArgumentsLengthError;
function pluralize(word, count) {
    if (count !== 1) {
        switch (word) {
            case 'was':
                word = 'were';
                break;
            default: word = word + 's';
        }
    }
    return `${count} ${word}`;
}
class ChannelClosedError extends errors_1.CustomError {
}
exports.ChannelClosedError = ChannelClosedError;
//# sourceMappingURL=error.js.map