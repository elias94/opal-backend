"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidArgumentError = exports.parallel = void 0;
const check_concurrency_1 = require("../shared/check-concurrency");
Object.defineProperty(exports, "InvalidArgumentError", { enumerable: true, get: function () { return check_concurrency_1.InvalidArgumentError; } });
const signal_1 = require("../classes/signal");
function parallel(tasks, concurrency = Infinity) {
    check_concurrency_1.checkConcurrency('concurrency', concurrency);
    return new Promise(async (resolve, reject) => {
        let total = 0;
        let done = 0;
        let running = 0;
        let isEnd = false;
        const iterator = tasks[Symbol.iterator]();
        let resolved = new signal_1.Signal();
        while (true) {
            const { value: task, done: end } = iterator.next();
            if (end) {
                isEnd = true;
                break;
            }
            else {
                runTask(task);
                total++;
                running++;
                while (running === concurrency) {
                    try {
                        await resolved;
                    }
                    catch (_a) {
                        return;
                    }
                    finally {
                        resolved = new signal_1.Signal();
                    }
                }
                if (isEnd)
                    return;
            }
        }
        if (total === 0)
            resolve();
        async function runTask(task) {
            try {
                await task();
                done++;
                running--;
                if (isEnd) {
                    if (total === done)
                        resolve();
                }
                else {
                    resolved.emit();
                }
            }
            catch (e) {
                isEnd = true;
                resolved.discard();
                reject(e);
            }
        }
    });
}
exports.parallel = parallel;
//# sourceMappingURL=parallel.js.map