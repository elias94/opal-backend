"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cascadable = exports.cascadify = void 0;
require("reflect-metadata");
const types_1 = require("@blackglory/types");
const CASCADABLE = 'extra-promise:cascadable';
function cascadify(target) {
    let promise = Promise.resolve(target);
    const { proxy, revoke } = Proxy.revocable(target, {
        get(target, prop) {
            if (types_1.isFunction(getMember())) {
                return (...args) => {
                    const result = Reflect.apply(getMember(), target, args);
                    promise = promise.then(() => result);
                    if (isCascadable(target, prop)) {
                        return proxy;
                    }
                    else {
                        revoke();
                        return promise;
                    }
                };
            }
            else {
                revoke();
                return promise.then(() => getMember());
            }
            function getMember() {
                return Reflect.get(target, prop);
            }
        }
    });
    return proxy;
}
exports.cascadify = cascadify;
function Cascadable(target, key) {
    Reflect.defineMetadata(CASCADABLE, true, target, key);
}
exports.Cascadable = Cascadable;
function isCascadable(target, key) {
    return Reflect.getMetadata(CASCADABLE, target, key);
}
//# sourceMappingURL=cascadify.js.map